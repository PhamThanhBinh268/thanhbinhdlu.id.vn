const { MongoClient } = require("mongodb");
const mongoose = require("mongoose");
require("dotenv").config();

// Import models
const User = require("./src/models/User");
const Category = require("./src/models/Category");
const Post = require("./src/models/Post");

async function seedData() {
  try {
    await mongoose.connect(process.env.MONGODB_URI);
    console.log("üîó K·∫øt n·ªëi MongoDB th√†nh c√¥ng");

    // 1. T·∫°o categories
    console.log("üìÅ T·∫°o danh m·ª•c...");
    const categories = [
      {
        tenDanhMuc: "ƒê·ªì ƒêi·ªán T·ª≠",
        moTa: "ƒêi·ªán tho·∫°i, laptop, m√°y t√≠nh b·∫£ng",
        icon: "fas fa-mobile-alt",
      },
      {
        tenDanhMuc: "Th·ªùi Trang",
        moTa: "Qu·∫ßn √°o, gi√†y d√©p, ph·ª• ki·ªán",
        icon: "fas fa-tshirt",
      },
      {
        tenDanhMuc: "ƒê·ªì Gia D·ª•ng",
        moTa: "ƒê·ªì d√πng nh√† b·∫øp, n·ªôi th·∫•t",
        icon: "fas fa-home",
      },
      {
        tenDanhMuc: "S√°ch VƒÉn Ph√≤ng Ph·∫©m",
        moTa: "S√°ch, d·ª•ng c·ª• h·ªçc t·∫≠p",
        icon: "fas fa-book",
      },
      {
        tenDanhMuc: "Xe C·ªô",
        moTa: "Xe m√°y, xe ƒë·∫°p, √¥ t√¥",
        icon: "fas fa-motorcycle",
      },
      {
        tenDanhMuc: "Th·ªÉ Thao",
        moTa: "D·ª•ng c·ª• th·ªÉ thao, gym",
        icon: "fas fa-dumbbell",
      },
    ];

    for (const catData of categories) {
      const existingCat = await Category.findOne({
        tenDanhMuc: catData.tenDanhMuc,
      });
      if (!existingCat) {
        await Category.create(catData);
        console.log(`‚úÖ T·∫°o danh m·ª•c: ${catData.tenDanhMuc}`);
      }
    }

    // 2. L·∫•y user v√† category IDs
    const users = await User.find();
    const categoriesDb = await Category.find();

    if (users.length === 0) {
      console.log("‚ùå Kh√¥ng c√≥ user n√†o. Vui l√≤ng t·∫°o user tr∆∞·ªõc.");
      return;
    }

    // 3. T·∫°o sample posts
    console.log("üìù T·∫°o b√†i ƒëƒÉng m·∫´u...");
    const samplePosts = [
      {
        tieuDe: "iPhone 13 Pro Max 128GB - C√≤n m·ªõi 95%",
        moTa: "B√°n iPhone 13 Pro Max m√†u xanh d∆∞∆°ng, 128GB. M√°y c√≤n r·∫•t m·ªõi, kh√¥ng tr·∫ßy x∆∞·ªõc. Full box, c√°p s·∫°c, tai nghe. B·∫£o h√†nh ch√≠nh h√£ng c√≤n 6 th√°ng.",
        gia: 25000000,
        tinhTrang: "nhu-moi",
        diaDiem: "Qu·∫≠n 1, TP.HCM",
        tags: ["iphone", "apple", "ƒëi·ªán tho·∫°i", "smartphone"],
        hinhAnh: [
          "https://via.placeholder.com/400x300.png?text=iPhone+13+Pro+Max+1",
          "https://via.placeholder.com/400x300.png?text=iPhone+13+Pro+Max+2",
        ],
      },
      {
        tieuDe: "Laptop Dell XPS 13 - i7 Gen 11, 16GB RAM",
        moTa: "Laptop Dell XPS 13 inch, chip Intel i7 th·∫ø h·ªá 11, RAM 16GB, SSD 512GB. M√°y m·ªèng nh·∫π, pin t·ªët, m√†n h√¨nh s·∫Øc n√©t. S·ª≠ d·ª•ng cho c√¥ng vi·ªác v√† h·ªçc t·∫≠p.",
        gia: 18000000,
        tinhTrang: "tot",
        diaDiem: "Qu·∫≠n 3, TP.HCM",
        tags: ["laptop", "dell", "xps", "i7", "m√°y t√≠nh"],
        hinhAnh: [
          "https://via.placeholder.com/400x300.png?text=Dell+XPS+13+1",
          "https://via.placeholder.com/400x300.png?text=Dell+XPS+13+2",
        ],
      },
      {
        tieuDe: "√Åo kho√°c hoodie Uniqlo - Size M",
        moTa: "√Åo kho√°c hoodie Uniqlo ch√≠nh h√£ng, size M, m√†u ƒëen. Ch·∫•t li·ªáu cotton m·ªÅm m·∫°i, ·∫•m √°p. M·∫∑c √≠t l·∫ßn, c√≤n r·∫•t m·ªõi.",
        gia: 350000,
        tinhTrang: "nhu-moi",
        diaDiem: "Qu·∫≠n 7, TP.HCM",
        tags: ["√°o kho√°c", "hoodie", "uniqlo", "th·ªùi trang"],
        hinhAnh: [
          "https://via.placeholder.com/400x300.png?text=Hoodie+Uniqlo+1",
        ],
      },
      {
        tieuDe: "Xe ƒë·∫°p Fixed Gear - M√†u tr·∫Øng",
        moTa: "Xe ƒë·∫°p Fixed Gear m√†u tr·∫Øng, khung h·ª£p kim nh√¥m, b√°nh xe 700c. Xe ƒë·∫πp, ch·∫°y √™m, ph√π h·ª£p cho vi·ªác di chuy·ªÉn trong th√†nh ph·ªë.",
        gia: 2500000,
        tinhTrang: "tot",
        diaDiem: "Qu·∫≠n B√¨nh Th·∫°nh, TP.HCM",
        tags: ["xe ƒë·∫°p", "fixed gear", "xe c·ªô"],
        hinhAnh: [
          "https://via.placeholder.com/400x300.png?text=Fixed+Gear+1",
          "https://via.placeholder.com/400x300.png?text=Fixed+Gear+2",
        ],
      },
      {
        tieuDe: "B·ªô s√°ch Harry Potter - Ti·∫øng Vi·ªát",
        moTa: "B·ªô s√°ch Harry Potter ƒë·∫ßy ƒë·ªß 7 t·∫≠p, b·∫£n d·ªãch ti·∫øng Vi·ªát. S√°ch c√≤n m·ªõi, kh√¥ng r√°ch r·ªùi. Ph√π h·ª£p cho h·ªçc sinh, sinh vi√™n y√™u th√≠ch ƒë·ªçc s√°ch.",
        gia: 450000,
        tinhTrang: "tot",
        diaDiem: "Qu·∫≠n 10, TP.HCM",
        tags: ["s√°ch", "harry potter", "vƒÉn h·ªçc", "ti·ªÉu thuy·∫øt"],
        hinhAnh: [
          "https://via.placeholder.com/400x300.png?text=Harry+Potter+Books",
        ],
      },
    ];

    for (let i = 0; i < samplePosts.length; i++) {
      const postData = samplePosts[i];

      // Random user and category
      const randomUser = users[Math.floor(Math.random() * users.length)];
      const randomCategory =
        categoriesDb[Math.floor(Math.random() * categoriesDb.length)];

      const existingPost = await Post.findOne({ tieuDe: postData.tieuDe });
      if (!existingPost) {
        await Post.create({
          ...postData,
          nguoiDang: randomUser._id,
          danhMuc: randomCategory._id,
          trangThai: "approved",
        });
        console.log(`‚úÖ T·∫°o b√†i ƒëƒÉng: ${postData.tieuDe}`);
      }
    }

    console.log("üéâ Seed data ho√†n th√†nh!");
  } catch (error) {
    console.error("‚ùå L·ªói seed data:", error);
  } finally {
    await mongoose.connection.close();
  }
}

seedData();
