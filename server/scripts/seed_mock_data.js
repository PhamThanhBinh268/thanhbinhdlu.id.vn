/*
 Seed a large volume of mock data for categories, users, posts and ratings.
 - Ensures enough categories (including "Kh√°c")
 - Creates demo users if not present
 - Creates many posts across categories with status=approved
 - Mix of selling (loaiGia=ban) and exchange (loaiGia=trao-doi), but mostly selling
 - Generates many ratings (both positive and negative) for posts
*/

const mongoose = require("mongoose");
const path = require("path");
require("dotenv").config({ path: path.join(__dirname, "../.env") });

const User = require("../src/models/User");
const Category = require("../src/models/Category");
const Post = require("../src/models/Post");

function rand(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

function pick(arr) {
  return arr[Math.floor(Math.random() * arr.length)];
}

function randomDateWithin(daysBack = 60) {
  const now = Date.now();
  const past = now - rand(0, daysBack) * 24 * 60 * 60 * 1000;
  return new Date(past);
}

async function upsertCategories() {
  const list = [
    { tenDanhMuc: "ƒêi·ªán Tho·∫°i", icon: "fas fa-mobile-alt" },
    { tenDanhMuc: "Laptop - PC", icon: "fas fa-laptop" },
    { tenDanhMuc: "M√°y ·∫¢nh", icon: "fas fa-camera" },
    { tenDanhMuc: "√Çm Thanh", icon: "fas fa-headphones" },
    { tenDanhMuc: "ƒê·ªìng H·ªì", icon: "fas fa-watch" },
    { tenDanhMuc: "Th·ªùi Trang", icon: "fas fa-tshirt" },
    { tenDanhMuc: "Gi√†y D√©p", icon: "fas fa-shoe-prints" },
    { tenDanhMuc: "ƒê·ªì Gia D·ª•ng", icon: "fas fa-home" },
    { tenDanhMuc: "S√°ch - VPP", icon: "fas fa-book" },
    { tenDanhMuc: "Xe C·ªô", icon: "fas fa-motorcycle" },
    { tenDanhMuc: "Th·ªÉ Thao", icon: "fas fa-dumbbell" },
    { tenDanhMuc: "Kh√°c", icon: "fas fa-box" },
  ];

  const results = [];
  for (const c of list) {
    let doc = await Category.findOne({ tenDanhMuc: c.tenDanhMuc });
    if (!doc) {
      doc = await Category.create({ ...c, trangThai: "active" });
    }
    results.push(doc);
  }
  return results;
}

async function ensureUsers(count = 30) {
  const existing = await User.countDocuments();
  if (existing >= count) {
    return User.find().limit(count);
  }
  const arr = [];
  for (let i = 0; i < count - existing; i++) {
    const idx = existing + i + 1;
    const user = new User({
      hoTen: `Ng∆∞·ªùi D√πng ${idx}`,
      email: `user${idx}@example.com`,
      matKhau: "123456",
      soDienThoai: `09${rand(10000000, 99999999)}`,
      diaChi: pick(["H√† N·ªôi", "TP.HCM", "ƒê√† N·∫µng", "C·∫ßn Th∆°", "H·∫£i Ph√≤ng"]),
      avatar: `https://ui-avatars.com/api/?name=${encodeURIComponent("ND"+idx)}&background=FFD333&color=3D464D`,
    });
    arr.push(user.save());
  }
  await Promise.all(arr);
  return User.find().limit(count);
}

const sampleTitles = [
  "iPhone 12 Pro Max", "Samsung Galaxy S22", "MacBook Pro 14", "Dell XPS 13",
  "Sony A7 III", "Canon EOS R6", "Tai nghe Sony WH-1000XM4", "Loa JBL Charge",
  "ƒê·ªìng h·ªì Apple Watch Series 7", "Gi√†y Nike Air Max", "√Åo kho√°c Uniqlo",
  "N·ªìi chi√™n kh√¥ng d·∫ßu", "B√†n ph√≠m c∆° Keychron", "Xe ƒë·∫°p th·ªÉ thao Giant",
  "S√°ch L·∫≠p Tr√¨nh JavaScript", "M√†n h√¨nh LG 27 inch", "Router Wi-Fi Asus",
];

const sampleImages = [
  "https://images.unsplash.com/photo-1511707171634-5f897ff02aa9?w=800",
  "https://images.unsplash.com/photo-1517336714731-489689fd1ca8?w=800",
  "https://images.unsplash.com/photo-1512499617640-c2f999098c09?w=800",
  "https://images.unsplash.com/photo-1510557880182-3d4d3cba35b1?w=800",
  "https://images.unsplash.com/photo-1511381939415-c1e8453a2832?w=800",
  "https://images.unsplash.com/photo-1505740420928-5e560c06d30e?w=800",
];

const positiveComments = [
  "S·∫£n ph·∫©m r·∫•t t·ªët, ƒë√°ng ti·ªÅn!",
  "Giao h√†ng nhanh, t∆∞ v·∫•n nhi·ªát t√¨nh.",
  "H√¨nh nh∆∞ m√¥ t·∫£, ch·∫•t l∆∞·ª£ng ·ªïn.",
  "R·∫•t h√†i l√≤ng, s·∫Ω ·ªßng h·ªô ti·∫øp.",
  "ƒê√≥ng g√≥i k·ªπ, d√πng m∆∞·ª£t m√†.",
];

const negativeComments = [
  "Ch·∫•t l∆∞·ª£ng ch∆∞a nh∆∞ mong ƒë·ª£i.",
  "Giao h√†ng h∆°i ch·∫≠m.",
  "S·∫£n ph·∫©m c√≥ v·∫øt x∆∞·ªõc nh·∫π.",
  "H∆°i ·ªìn, pin t·ª•t nhanh.",
  "ƒê√≥ng g√≥i s∆° s√†i.",
];

function buildRandomPost({ sellerId, categories }) {
  const title = pick(sampleTitles) + " - " + rand(1, 9999);
  const cat = pick(categories);
  const selling = Math.random() < 0.8; // 80% l√† b√°n
  const gia = selling ? rand(50000, 30000000) : 0;
  const city = pick(["TP.HCM", "H√† N·ªôi", "ƒê√† N·∫µng", "H·∫£i Ph√≤ng", "C·∫ßn Th∆°", "B√¨nh D∆∞∆°ng", "ƒê·ªìng Nai"]);
  return {
    tieuDe: title,
    moTa:
      "M√¥ t·∫£ t·ª± ƒë·ªông cho s·∫£n ph·∫©m th·ª≠ nghi·ªám. S·∫£n ph·∫©m ƒë∆∞·ª£c t·∫°o ng·∫´u nhi√™n ƒë·ªÉ test hi·ªÉn th·ªã danh s√°ch.",
    gia,
    loaiGia: selling ? "ban" : "trao-doi",
    hinhAnh: [pick(sampleImages)],
    danhMuc: cat._id,
    nguoiDang: sellerId,
    diaDiem: city,
    tinhTrang: pick(["moi", "nhu-moi", "tot", "can-sua-chua"]),
    trangThai: "approved",
    createdAt: randomDateWithin(60),
    updatedAt: new Date(),
    tags: ["seed", cat.tenDanhMuc.toLowerCase()]
  };
}

function buildRandomRatings({ post, users }) {
  const ratings = [];
  const n = rand(0, 50); // s·ªë l∆∞·ª£t ƒë√°nh gi√° m·ªói b√†i
  for (let i = 0; i < n; i++) {
    let rater = pick(users);
    // tr√°nh t·ª± ƒë√°nh gi√° b√†i c·ªßa m√¨nh
    let tryCount = 0;
    while (rater._id.toString() === post.nguoiDang.toString() && tryCount < 5) {
      rater = pick(users);
      tryCount++;
    }
    const good = Math.random() < 0.7; // 70% t√≠ch c·ª±c
    const score = good ? rand(4, 5) : rand(1, 3);
    const comment = good ? pick(positiveComments) : pick(negativeComments);
    ratings.push({
      nguoiDanhGia: rater._id,
      diemDanhGia: score,
      binhLuan: comment,
      ngayDanhGia: randomDateWithin(60),
    });
  }
  return ratings;
}

async function run() {
  const uri = process.env.MONGODB_URI || "mongodb://localhost:27017/oldmarket";
  await mongoose.connect(uri);
  console.log("‚úÖ Connected to MongoDB");

  const categories = await upsertCategories();
  const users = await ensureUsers(40);

  // Create posts in bulk
  const totalPostsToCreate = 120;
  const sellers = users; // any user can be a seller
  const docs = [];
  for (let i = 0; i < totalPostsToCreate; i++) {
    const seller = pick(sellers);
    const doc = buildRandomPost({ sellerId: seller._id, categories });
    // push now and add ratings later after insert to have post id
    docs.push(doc);
  }

  console.log(`üìù Inserting ${docs.length} posts...`);
  const inserted = await Post.insertMany(docs, { ordered: false });
  console.log(`‚úÖ Inserted ${inserted.length} posts`);

  // Attach ratings
  console.log("‚≠ê Generating ratings for posts...");
  const updates = [];
  for (const p of inserted) {
    const ratings = buildRandomRatings({ post: p, users });
    updates.push(
      Post.findByIdAndUpdate(
        p._id,
        { $set: { danhGia: ratings } },
        { new: false }
      )
    );
  }
  await Promise.all(updates);
  console.log("‚úÖ Ratings generated");

  console.log("üéâ Mock data seeding complete!");
  await mongoose.connection.close();
}

run().catch(async (e) => {
  console.error("‚ùå Seed error:", e);
  try { await mongoose.connection.close(); } catch(_) {}
  process.exit(1);
});
